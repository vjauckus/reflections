1. Initializing a Repository
------------------------------------
What happens when you initialize a repository? Why do you need to do it?
Now that you’ve initialized your first repository:
git init
(we can see .git file)
But we did not get commit yet: we will get 0 commits after:
git log

fatal: your current branch 'master' does not have any commits yet
---------------------------------
We can also check a status:
git status
The response is:
On branch master

Initial commit

Untracked files:
  (use "git add <file>..." to include in what will be committed)

  .DS_Store
  lesson_1_reflections.txt
  lesson_2_reflections.txt

nothing added to commit but untracked files present (use "git add" to track)

Creating and Modifying a Repository
------------------------------------
Concept Map: init, add, staging area and working directory

We’ve introduced a few new concepts since we last revisited our concept map.

    git init
    git add lesson_1_reflections.txt (tut the file to Staging area)
    git status (zeigt danach:
On branch master

Initial commit

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)

  new file:   lesson_1_reflections.txt

Untracked files:
  (use "git add <file>..." to include in what will be committed)

  .DS_Store
    )

    git reset lesson_1_reflections.txt (entfernt aus Staging area)

    How is the staging area different from the working directory and the repository? What value do you think it offers?
    ------------------------------------------------------------------------------------------------------------------
    Differance between working directory and staging area is:
    - st. area consist only of the files that to be saved in repository and not all files.

    Differance between repository and staging area is:
    - staging area is like container with files that habe to be saved in repository
    -staging area is like a copy of recent commit
    - repository saved the files multiple time according to version, with timestamps

    How to write a commit message
    ------------------------------
    You can also specify a commit message via the command line by running git commit -m "Commit message" instead of just 
    git commit. 
    It's still a good idea to get an editor set up, since this will make it easier to write long commit messages that fully describe the change.

After bug fixing, we can do this: save game.js with changes, then tip
- git status
will show "Not staged for commit
  modified file game.js"
-git add game.js (stage our change: our files in Working directory and in Stage area are the same now) 
-git status will show ("changes to be commited")
-git diff (is empty)
How can you use the staging area to make sure you have one commit per logical change?
-------------------------------------------------------------------------------------
Make add to staging area regulary after every logical change

Use Branches and diagrams
--------------------------
What are some situations when branches would be helpful in keeping your history organized? How would branches help?

With branches, one can create new lines of developments whether for 
experimentations or for different features

If we have for example many versions of the same code in diferant languages or layouts we can create a new branch:
-git branch easy-mode
-git checkout easy-mode (switch to easy mode)
Make changes or addoption for differant language
with: git add game.js
-git commit.

For collaboration:
git checkout coins
git log --graph --oneline master coins
Compare master and coins branches
How do the diagrams help you visualize the branch structure?
------------------------------------------------------------
The diagram should help to track which branch contains which commits.
Diagram shows 
-how we can switch to other branch (at which point/commit)
-unreachable commits and then we can create at this commit a new branch with:
git checkout -b new_branch_name

Merging files
-------------
If a branch is deleted and leaves some commits unreachable from existing branches, those commits will continue to be accessible by commit id, until Git’s garbage collection runs. This will happen automatically from time to time, unless you actively turn it off. You can also run this process manually with:
 git gc.

 Checking out the coins branch

If you haven't already checked out the coins branch, you'll need to do so now with the command git checkout coins before you'll be able to refer to it. Once you've done that, decide whether you should keep it checked out or check out a different branch before completing the merge.
A note about git merge
-------------------------

git merge will also include the currently checked-out branch in the merged version. So if you have 
branch1 checked out, and you run 
git merge branch2 branch3, the merged version will combine:
 branch1 as well as branch2 and branch3. 
 That’s because the branch1 label will update after you make the merge commit, so it’s unlikely that you didn’t want the changes from branch1 included in the merge. For this reason, you should always
  checkout one of the two branches you’re planning on merging before doing the merge. Which one you should check out depends on which branch label you want to point to the new commit.

Since the checked-out branch is always included in the merge, you may have guessed that when you are merging two branches, you don't need to specify both of them as arguments to git merge on the command line. If you want to merge branch2 into branch1, you can simply git checkout branch1 and then type:
 git merge branch2. 
 The only reason to type git merge branch1 branch2 is if it helps you keep better mental track of which branches you are merging.

Also, since the two branches are merged, the order in which they are typed into the command line does not matter. The key is to remember that git merge always merges all the specified branches into the currently checked out branch, creating a new commit for that branch.
Merge conflict

If you get a message like this
---------------------------------

Auto-merging game.js
CONFLICT (content): Merge conflict in game.js
Automatic merge failed; fix conflicts and then commit the result.

then your files were not in the same state as Caroline's when you started the merge. To fix this, complete the following steps:

    Restore your files to their state before you started the merge by running git merge --abort
    Double check the state of your files. If you run git log while the master branch is checked out, you should see Caroline's "Add color" commit as the second-most-recent, and the most recent should be your commit fixing the bullet bug. If you use git diff to compare your commit to Caroline's, your commit should introduce the line this.delayBeforeBullet = 10; on line 424. The line should be indented to the same level as the line below it using only spaces (no tabs), and the line should have no spaces after it.
    Once your file is in the correct state, create a new commit with your changes.
    Try the merge again.
Merge is successful if you get:
--------------------------------
Auto-merging game.js
Merge made by the 'recursive' strategy.
 game.js | 161 +++++++++++++++++++++++++++++++++++++++++++++-------------------
 1 file changed, 115 insertions(+), 46 deletions(-)
 Danach k.m. git log neuen commit sehen

Merge conflict (Newline characters between Windows and Unix systems)
--------------------------------------------------------------------------

Context: Whenever we hit the "Enter" key on the keyboard, we are actually telling the computer to insert an invisible character into our text file to indicate to the computer that there should be a new line. Unix systems adds one character called the "line feed" character or LF or \n while Windows systems adds two characters, "carriage return" and "line feed" or CRLF or \r\n.

Caroline's files have LF because her files were edited on Mac OSX, which uses LF. If a Windows user were to edit Caroline's files, the Windows text editor might convert all LF to CRLF to make editing files possible. When the Windows user merges her file with Caroline's files, a merge conflict will result due to the different LF and CRLF characters.

To fix this, Windows users should set the global autocrlf attribute to true: git config --global core.autocrlf true. More information can be found here: https://help.github.com/articles/dealing-with-line-endings/#platform-all
Comparing a commit to its parent

The command Caroline mentions to compare a commit to its parent is:

git show commit_id

Merging coins into master
------------------------
Make the coins solid and yellow:
In Sprite = function ():
  
Zeile 97:
this.children = {};
  this.color    = 'yellow';
  this.solid    = true;

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
---------------------------------------------------------------------------------------------------------
The result of merging two branches together is a mix of changes in both branches plus the same code in both branches.

When two branches are merged: the commits of both are serialized in the
log chronologically, thus the logical connection between commits is lost
The diagram gets the possibility to see changes in column and a better way to compare commits.

What are the pros and cons of Git’s automatic merging vs. always doing merges manually?
---------------------------------------------------------------------------------------
Automatic merge can spare time, but in critical situation is manually merge more securely.


    

